============================
Personal Status Logger (stl)
============================

Contents
--------

.. toctree::
   :maxdepth: 1

   getting-started
   use
   internals
   contribute

Legacy Implementation
---------------------

The following documentation reflects the *prior* implementation of
``stl``, and remains for historical and archival reasons.

.. toctree::
   :maxdepth: 1

   zsh

Resources
---------

.. toctree::
   :maxdepth: 1

   ref

- `stl git repository <http://git.cyborginstitute.net/?p=stl.git>`_
- `stl on Github <https://github.com/tychoish/stl/>`_
- `stl issue tracker <http://issues.cyborginstitute.net/>`_

The latest version of this manual is also available for download in
ePub and PDF formats:

- `stl Manual, ePub <http://cyborginstitute.org/projects/stl/stl.epub>`_
- `stl Manual, PDF <http://cyborginstitute.org/projects/stl/stl.pdf>`_

Overview
--------

``stl`` (i.e. "status logger") is a tool for managing, maintaining,
and logging work for writers. With ``stl`` you can track the aggregate
word count of multi-file writing projects. Furthermore, ``stl``
include tools to build a more complete and more automated log of
personal work and activity.

The initial implementation (circa Fall/Winter 2011) of ``stl`` was an
over-complex shell script that was neither easy to maintain or
particularly robust, that code, is still available in the git
repository. The second implementation, in Python, is more modular, and
significantly more flexible.

``stl`` may be exactly the tool you need to:

- Record, manage, and view the output of your build tools (i.e. build
  reports.)

- Track word counts automatically to provide an overview of your
  progress both as you work and as you're attempting to track daily
  and hourly progress.

- Wrap your build tools to provide a more consistent interface.

This site documents both the use and the internal operation of
``stl``, including the initial implementation for posterity and the
current implementation.

Future Development
------------------

- Better validation of inputs.

- More clear interface for configuring outputs.

- Distribution in the Python Package Index.

- A daemon mode.

- More granular caching, potentially caching word counts on a per-file
  basis rather than forcing repeated ``wc``. Potentially using
  ``make`` or ``ninja``.

- Further decouple and create a more modular notification
  system. Currently you can use ``stl`` to send notifications to the
  command-line, to log files, and/or to `Emacs
  <http://www.gnu.org/software/emacs/>`_, via `sauron-mode
  <http://www.emacswiki.org/emacs/Sauron>`_.
