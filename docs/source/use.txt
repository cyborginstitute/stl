===============================
Status Logger Use and Operation
===============================

.. _manual-pages:
.. _man-pages:

Manual Pages
------------

.. toctree::
   :max depth: 1

   /man/lnote
   /man/wc_track
   /man/sauron
   /man/stl

See :doc:`/internals` for more information about the implementation
of each component.

.. _getting-started:

Getting Started
---------------

While ``stl`` may have more traditional Python packaging in the
future, given the current state of development and organization, to
begin using STL you should simply add the four constituent files to
the *same* folder in you shell's search path, by adding one of the
following lines to your :file:`~/.bashrc`, :file:`~/.bash_profile`, or
:file:`~/.zshrc` (or similar) file:

.. code-block:: sh

   PATH=$PATH:~/bin
   PATH=$PATH:~/scripts
   PATH=$PATH:/opt/bin

Then, copy the files in the ``stl/`` directory in the ``stl``
repository to this directory. You can issue the following sequence of
commands at your system prompt to download the files hosted on github:

.. code-block:: sh

   curl http://raw.github.com/cyborginstitute/stl/master/stl.py > stl.py
   curl http://raw.github.com/cyborginstitute/stl/master/lnote.py > lnote.py
   curl http://raw.github.com/cyborginstitute/stl/master/wc_track.py > wc_track.py
   curl http://raw.github.com/cyborginstitute/stl/master/sauron.py > sauron.py

Then create symlinks in this directory for easy use without the
``.py`` extension, with the following commands. Replace ``~/bin`` with
the path to your personal script directory:

.. code-block:: sh

   cd ~/bin
   ln -s stl stl.py
   ln -s lnote lnote.py
   ln -s wc_track wc_track.py
   ln -s sauron sauron.py

Continue reading the :ref:`manual pages <manual-pages>` pages the
:doc:`internals section </internals>` for more information about the
use and implementation of stl.

General Operation
-----------------

``stl`` consists of three connected Python modules/scripts that you
may use either independently or in conjunction. From the highest
level, these programs are:

- :doc:`sauron </man/sauron>`: A script that provides a wrapper around
  emacsclient, and ethe emacs notification system `sauron
  </>`_. Supports multiple emacs clients running on a single
  system/user account, and does not require a `dbus`
  configuration. This provides a programatic interface for sauron-mode.

- :doc:`stl </man/stl>`: A script that provides a simple interface to
  calculate and log word counts for multi-file projects. This script
  does not store any information regarding projects or configuration.

- :doc:`wc_track </man/wc_track>`: For running regularly as a cronjob,
  ``wc_track`` stores the :py:data:`projects` dict that contains
  per-project configuration, and several functions for automatically
  running ``stl`` for each project.

- :doc:`lnote </man/lnote>`: A simple interactive script for creating
  arbitrary notes in the log to provide additional context.

``projects`` Configuration
--------------------------

The ``projects`` dict in the :file:`wc_track` file, provides a way to
pre-configure :file:`wc_track` as a wrapper around
:file:`stl`. Consider the following basic setup:

.. code-block:: python

   username = tychoish

   projects = {
     'stl' : {
           'path' : '/home/' + username + '/projects/stl/docs/source/',
           'target' : 'projects',
           'emacs' : True,
           'quiet' : True,
           'log' : '/home/' + username + '/projects/stats-' + socket.gethostname() + '.log',
           'ext': 'txt'
      },
    }

See :doc:`/man/wc_track` and :doc:`/internals/wc_track` for more
information.
